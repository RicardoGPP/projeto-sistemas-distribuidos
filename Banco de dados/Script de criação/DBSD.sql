/* CRIAÇÃO DO BANCO DE DADOS */

CREATE DATABASE DBSD;

/* DEFINIÇÃO DO BANCO A SER USADO */

USE DBSD;

/* CRIAÇÃO DAS TABELAS */

CREATE TABLE PESSOA
(
	CODIGO INT NOT NULL,
	CPF CHAR(14) NOT NULL,
	RG VARCHAR(18) NOT NULL,
	NOME VARCHAR(100) NOT NULL,
	DATA_NASCIMENTO DATE NOT NULL,
	SEXO CHAR(1) NOT NULL,
	FUMA CHAR(1) NOT NULL,
	TEM_FILHOS CHAR(1) NOT NULL,
	LOGRADOURO VARCHAR(100) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	BAIRRO VARCHAR(100) NOT NULL,
	CIDADE INT NOT NULL,
	CEP CHAR(10) NOT NULL,
	TELEFONE VARCHAR(14) NOT NULL,
	EMAIL VARCHAR(100) NOT NULL,
	FOTO VARCHAR(300) NOT NULL
);

CREATE TABLE PAIS
(
	CODIGO INT NOT NULL,
	NOME VARCHAR(100) NOT NULL
);

CREATE TABLE ESTADO
(
	CODIGO INT NOT NULL,
	NOME VARCHAR(100) NOT NULL,
	PAIS INT NOT NULL
);

CREATE TABLE CIDADE
(
	CODIGO INT NOT NULL,
	NOME VARCHAR(100) NOT NULL,
	ESTADO INT NOT NULL
);

/* CRIAÇÃO DAS CHAVES PRIMÁRIAS */

ALTER TABLE PESSOA ADD CONSTRAINT PK_PESSOA PRIMARY KEY (CODIGO);
ALTER TABLE PAIS ADD CONSTRAINT PK_PAIS PRIMARY KEY (CODIGO);
ALTER TABLE ESTADO ADD CONSTRAINT PK_ESTADO PRIMARY KEY (CODIGO);
ALTER TABLE CIDADE ADD CONSTRAINT PK_CIDADE PRIMARY KEY (CODIGO);

/* DEFINIÇÃO DO AUTO_INCREMENT PARA AS CHAVES PRIMÁRIAS */

ALTER TABLE PESSOA MODIFY CODIGO INT NOT NULL AUTO_INCREMENT;
ALTER TABLE PAIS MODIFY CODIGO INT NOT NULL AUTO_INCREMENT;
ALTER TABLE ESTADO MODIFY CODIGO INT NOT NULL AUTO_INCREMENT;
ALTER TABLE CIDADE MODIFY CODIGO INT NOT NULL AUTO_INCREMENT;

/* CRIAÇÃO DAS CHAVES ESTRANGEIRAS */

ALTER TABLE PESSOA ADD CONSTRAINT FK_CIDADE_PESSOA FOREIGN KEY (CIDADE) REFERENCES CIDADE (CODIGO);
ALTER TABLE ESTADO ADD CONSTRAINT FK_PAIS_ESTADO FOREIGN KEY (PAIS) REFERENCES PAIS (CODIGO);
ALTER TABLE CIDADE ADD CONSTRAINT FK_CIDADE_ESTADO FOREIGN KEY (ESTADO) REFERENCES ESTADO (CODIGO);

/* CRIAÇÃO DAS PROCEDURES */

DELIMITER $
CREATE PROCEDURE MOSTRAR_ERRO(MENSAGEM VARCHAR(200))
BEGIN
	SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MENSAGEM;
END$
DELIMITER ;

/* CRIAÇÃO DAS FUNÇÕES */

DELIMITER $
CREATE FUNCTION SEXO_VALIDO(SEXO CHAR(1)) RETURNS TINYINT
BEGIN
	RETURN (SEXO IN ('M', 'F'));
END$
DELIMITER ;

DELIMITER $
CREATE FUNCTION FLAG_VALIDA(FLAG CHAR(1)) RETURNS TINYINT
BEGIN
	RETURN (FLAG IN ('S', 'N'));
END$
DELIMITER ;

/* CRIAÇÃO DAS TRIGGERS */

DELIMITER $
CREATE TRIGGER TRIGGER_PESSOA_BEFORE_INSERT BEFORE INSERT ON PESSOA FOR EACH ROW
BEGIN
	IF NOT (SEXO_VALIDO(NEW.SEXO)) THEN
		CALL MOSTRAR_ERRO('O campo "SEXO" é inválido.');
	ELSEIF NOT (FLAG_VALIDA(NEW.FUMA)) THEN
		CALL MOSTRAR_ERRO('O campo "FUMA" é inválido.');
	ELSEIF NOT (FLAG_VALIDA(NEW.TEM_FILHOS)) THEN
		CALL MOSTRAR_ERRO('O campo "TEM_FILHOS" é inválido.');
	END IF;
END$
DELIMITER ;

DELIMITER $
CREATE TRIGGER TRIGGER_PESSOA_BEFORE_UPDATE BEFORE UPDATE ON PESSOA FOR EACH ROW
BEGIN
	IF NOT (SEXO_VALIDO(NEW.SEXO)) THEN
		CALL MOSTRAR_ERRO('O campo "SEXO" é inválido.');
	ELSEIF NOT (FLAG_VALIDA(NEW.FUMA)) THEN
		CALL MOSTRAR_ERRO('O campo "FUMA" é inválido.');
	ELSEIF NOT (FLAG_VALIDA(NEW.TEM_FILHOS)) THEN
		CALL MOSTRAR_ERRO('O campo "TEM_FILHOS" é inválido.');
	END IF;
END$
DELIMITER ;